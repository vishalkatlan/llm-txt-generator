"""
Document Formatter module to format extracted content into an LLM-friendly document.
"""

import os
import datetime
from typing import List, Dict, Any
from rich.console import Console

console = Console()


class DocFormatter:
    """Format extracted content into an LLM-friendly document."""

    def __init__(self):
        """Initialize the document formatter."""
        pass

    def format_docs(
        self, contents: List[Dict[str, Any]], repo_url: str, repo_name: str
    ) -> str:
        """
        Format the extracted content into an LLM-friendly document.

        Args:
            contents: List of content dictionaries with embeddings
            repo_url: URL of the repository
            repo_name: Name of the repository

        Returns:
            Formatted document as a string
        """
        if not contents:
            return f"No content found for repository: {repo_url}"

        # Sort contents by similarity
        sorted_contents = sorted(
            contents, key=lambda x: x.get("similarity", 0), reverse=True
        )

        # Format header
        header = self._format_header(repo_url, repo_name)

        # Format content sections
        sections = []
        for content in sorted_contents:
            section = self._format_section(content)
            sections.append(section)

        # Format footer
        footer = self._format_footer(repo_url, repo_name)

        # Combine all sections
        document = f"{header}\n\n"
        document += "\n\n".join(sections)
        document += f"\n\n{footer}"

        console.print(f"Formatted documentation with {len(sections)} sections")
        return document

    def _format_header(self, repo_url: str, repo_name: str) -> str:
        """
        Format the document header.

        Args:
            repo_url: URL of the repository
            repo_name: Name of the repository

        Returns:
            Formatted header as a string
        """
        date = datetime.datetime.now().strftime("%Y-%m-%d")

        header = (
            f"# {repo_name} Documentation\n\n"
            f"Repository: {repo_url}\n"
            f"Generated: {date}\n\n"
            f"## Overview\n\n"
            f"This documentation provides an overview of the {repo_name} repository, "
            f"including code snippets, explanations, and examples."
        )

        return header

    def _format_section(self, content: Dict[str, Any]) -> str:
        """
        Format a content section.

        Args:
            content: Content dictionary

        Returns:
            Formatted section as a string
        """
        title = content.get("title", "Untitled")
        description = content.get("description", "No description available")
        source = content.get("source", "Unknown source")

        section = f"## {title}\n\n"
        section += f"{description}\n"
        section += f"SOURCE: {source}\n\n"

        # Add code blocks
        for code_block in content.get("code_blocks", []):
            language = code_block.get("language", "")
            code = code_block.get("code", "")

            # Split code into smaller chunks if too large
            if len(code.split("\n")) > 100:
                code_chunks = self._split_code(code, 100)
                for i, chunk in enumerate(code_chunks):
                    section += f"\n```{language}\n{chunk}\n```\n"
                    if i < len(code_chunks) - 1:
                        section += "\n... (continued) ...\n"
            else:
                section += f"\n```{language}\n{code}\n```\n"

        section += "\n" + "-" * 40 + "\n"

        return section

    def _format_footer(self, repo_url: str, repo_name: str) -> str:
        """
        Format the document footer.

        Args:
            repo_url: URL of the repository
            repo_name: Name of the repository

        Returns:
            Formatted footer as a string
        """
        footer = (
            f"# End of {repo_name} Documentation\n\n"
            f"Generated by LLM Documentation Generator\n"
            f"Repository: {repo_url}"
        )

        return footer

    def _split_code(self, code: str, chunk_size: int) -> List[str]:
        """
        Split code into smaller chunks.

        Args:
            code: Code to split
            chunk_size: Maximum number of lines per chunk

        Returns:
            List of code chunks
        """
        lines = code.split("\n")
        chunks = []

        for i in range(0, len(lines), chunk_size):
            chunk = "\n".join(lines[i : i + chunk_size])
            chunks.append(chunk)

        return chunks
